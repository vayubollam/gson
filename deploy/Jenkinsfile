pipeline {
	agent any

    triggers {
        pollSCM('* * * * *')
    }

	tools {
		// Set names in Global Tools:
		gradle 'Gradle5.1'
	}

	environment {
		PERFECTO_TOKEN = credentials("PerfectoToken")
		APPCTNR_URL = credentials("MobileSecret${env.BUILD_ENV}URL")
        APPCTNR_USERNAME = credentials("MobileSecret${env.BUILD_ENV}User")
        APPCTNR_PASSWORD = credentials("MobileSecret${env.BUILD_ENV}Password")
        STORE_PASSWORD = credentials("AndroidSecretStorePassword")
        KEY_PASSWORD = credentials("AndroidSecretKeyPassword")
	}

	stages {
		stage('update app settings json file to show build date') {
            steps {
                script {
                    SlackUtils = load 'deploy/SlackUtils.groovy'

                    def shortCommitHash = env.GIT_COMMIT.substring(0, 6)
                    sh (
                        script: "sed -i '' -e 's/__BUILD_DATE__/${SlackUtils.getFormattedTime()}/g' app/src/main/assets/buildSettings.properties",
                        returnStdout: false
                    )
                    sh (
                        script: "sed -i '' -e 's/__BUILD_SHA__/${shortCommitHash}/g' app/src/main/assets/buildSettings.properties",
                        returnStdout: false
                    )
                }

                sh 'cat app/src/main/assets/buildSettings.properties'
            }
        }

		stage('Compile and Build  Stage') {
			steps {
				script {
				    sh (
				        script: "./gradlew clean",
				        returnStdout: false
				    )
                    sh (
                        script: "./gradlew assemble${env.BUILD_ENV}${env.FEATURE}Release",
                        returnStdout: false
                    )
				}
			}
		}

		stage('Adding variables to path') {
			steps {
				sh 'CLASSPATH=/Library/Java/Extensions/applicationcenterdeploytool.jar:/Library/Java/Extensions/json4j.jar'
			}
		}

		stage('upload to perfecto public cloud') {
			steps {
				script {
					if (env.BUILD_ENV == "QA" || env.BUILD_ENV == "QASus" || env.BUILD_ENV == "UAT" || env.BUILD_ENV == "Dev"){sh "curl -X POST -T app/build/outputs/apk/${env.BUILD_ENV}${env.FEATURE}/release/app-${env.BUILD_ENV}${env.FEATURE}-release.apk 'https://ibmgbs.perfectomobile.com/services/repositories/media/app-${env.BUILD_ENV}${env.FEATURE}-release.apk?operation=upload&overwrite=true&securityToken=$PERFECTO_TOKEN' --http1.1"}
				}
			}
		}

		stage('uploading into IBM app store') {
            steps {
                script {
                    sh "java -Dhttp.agent='Mozilla/5.0 (Windows NT 6.1)' -cp 'applicationcenterdeploytool.jar:json4j.jar' com.ibm.appcenter.Upload -l 'Petro-Canada (Carwash)' -isInstaller true -isActive true -s $APPCTNR_URL -c applicationcenter -u $APPCTNR_USERNAME -p $APPCTNR_PASSWORD -e -f app/build/outputs/apk/${env.BUILD_ENV}${env.FEATURE}/release/app-${env.BUILD_ENV}${env.FEATURE}-release.apk"
                }
            }
        }

		stage('Jenkins Logs Build Information') {
            steps {
                script {
                    SlackUtils = load 'deploy/SlackUtils.groovy'

                    def shortCommitHash = env.GIT_COMMIT.substring(0, 6)

                    echo "LOGS BLOCK"

                    echo "${env.FEATURE} ${env.Build_ENV} Build\n"
                    echo "Built Time: ${SlackUtils.getFormattedTime()}"
                    echo "Build SHA: ${shortCommitHash}"
                }
            }
        }

		stage('Slack Notification Stage') {
            steps {
                script {
                    SlackUtils = load 'deploy/SlackUtils.groovy'

                    def shortCommitHash = env.GIT_COMMIT.substring(0, 6)

                    def slackMessage = ""

                    switch (env.Build_ENV) {
                        case 'Dev':
                            def lastTenCommitMessages = sh(
                                script: 'git log --oneline -n 5',
                                returnStdout: true
                            )
                            lastTenCommitMessages = SlackUtils.addRMPLinks(lastTenCommitMessages)

                            slackMessage = "*Android ${env.BUILD_ENV} ${env.FEATURE} Build Completed on Master Push Commit: ${shortCommitHash}*\n"
                            slackMessage += "*Build time: ${SlackUtils.getFormattedTime()}*\n"
                            slackMessage += "${env.BUILD_URL}console\n"
                            slackMessage += "https://bitbucket.org/rfmp-suncor/suncor-android-carwash/commits/${env.GIT_COMMIT}\n"
                            slackMessage += "Last 5 commit messages on Master:\n ${lastTenCommitMessages}"

                            break;

                        case 'QA':
                            def commitMessagesSinceLastTag = sh(
                                script: 'git log --oneline $(git describe --tags --abbrev=0 @^)..@',
                                returnStdout: true
                            ).trim()
                            def androidTagName = sh(
                                script: 'git describe --abbrev=0 --tags',
                                returnStdout: true
                            ).trim()

                            commitMessagesSinceLastTag = SlackUtils.addRMPLinks(commitMessagesSinceLastTag)

                            slackMessage = "*Android ${env.BUILD_ENV} ${env.FEATURE} Build Completed on Tag Push: ${androidTagName} Commit: ${shortCommitHash}*\n"
                            slackMessage += "*Build time: ${SlackUtils.getFormattedTime()}*\n"
                            slackMessage += "${env.BUILD_URL}console\n"
                            slackMessage += "https://bitbucket.org/rfmp-suncor/suncor-android-carwash/commits/tag/${androidTagName}\n"
                            slackMessage += "Commit messages since last tag:\n ${commitMessagesSinceLastTag}"

                            break;

                        case ['Prod', 'DevSus', 'QASus', 'UAT']:
                            def commitMessagesSinceLastTag = sh(
                                script: 'git log --oneline $(git describe --tags --abbrev=0 @^)..@',
                                returnStdout: true
                            ).trim()
                            def androidTagName = sh(
                                script: 'git describe --abbrev=0 --tags',
                                returnStdout: true
                            ).trim()

                            commitMessagesSinceLastTag = SlackUtils.addRMPLinks(commitMessagesSinceLastTag)

                            slackMessage = "*Android ${env.BUILD_ENV} ${env.FEATURE} Build Completed for Git commit: ${env.GIT_SHA} [Tag: ${androidTagName}]*\n"
                            slackMessage += "*Build time: ${SlackUtils.getFormattedTime()}*\n"
                            slackMessage += "${env.BUILD_URL}console\n"
                            slackMessage += "https://bitbucket.org/rfmp-suncor/suncor-android-carwash/commits/${env.GIT_SHA}\n"
                            slackMessage += "Commit messages since last tag:\n ${commitMessagesSinceLastTag}"

                            break;

                        default:
                            echo "Cannot resolve build enviornment ${env.BUILD_ENV} ${env.FEATURE}"
                            break;
                    }

                    def slackChannel = SlackUtils.getSlackChannel(env.BUILD_ENV)

                    slackSend color: "good", channel: "${slackChannel}", message: slackMessage
                }
            }
        }
	}

	post {
        failure {
            script {
                echo "FAILURE BLOCK OK"

                SlackUtils = load 'deploy/SlackUtils.groovy'


                def slackMessage = ""

                switch (env.Build_ENV) {
                    case 'Dev':
                        def androidTagName = sh(
                            script: 'git describe --abbrev=0 --tags',
                            returnStdout: true
                        ).trim()

                        slackMessage = "*!!! Android ${env.BUILD_ENV} ${env.FEATURE} BUILD FAILED !!!*\n" +
                        "*Failed on Tag: ${androidTagName}*\n" +
                        "https://bitbucket.org/rfmp-suncor/suncor-android-carwash/commits/${env.GIT_COMMIT}\n" +
                        "*Fail time: ${SlackUtils.getFormattedTime()}*\n" +
                        "${env.BUILD_URL}console"

                        break;

                    case 'QA':
                        def androidTagName = sh(
                            script: 'git describe --abbrev=0 --tags',
                            returnStdout: true
                        ).trim()

                        slackMessage = "*!!! Android ${env.BUILD_ENV} ${env.FEATURE} BUILD FAILED !!!*\n" +
                        "*Failed on Tag: ${androidTagName}*\n" +
                        "https://bitbucket.org/rfmp-suncor/suncor-android-carwash/src/${androidTagName}\n" +
                        "*Fail time: ${SlackUtils.getFormattedTime()}*\n" +
                        "${env.BUILD_URL}console"

                        break;

                    case ['Prod', 'DevSus', 'QASus', 'UAT']:
                        def androidTagName = sh(
                            script: 'git describe --abbrev=0 --tags',
                            returnStdout: true
                        ).trim()

                        slackMessage = "*!!! Android ${env.BUILD_ENV} ${env.FEATURE} BUILD FAILED !!!*\n" +
                        "*Failed on Tag: ${androidTagName}*\n" +
                        "https://bitbucket.org/rfmp-suncor/suncor-android-carwash/commits/${env.GIT_COMMIT}\n" +
                        "*Fail time: ${SlackUtils.getFormattedTime()}*\n" +
                        "${env.BUILD_URL}console"

                        break;

                    default:
                        echo "Cannot resolve build enviornment ${env.BUILD_ENV}"
                        break;
                }

                def slackChannel = SlackUtils.getSlackChannel(env.BUILD_ENV)

                slackSend color: "#CC0000", channel: "${slackChannel}", message: slackMessage
            }
        }

		always {
			archiveArtifacts artifacts: "**/build/outputs/apk/${BUILD_ENV}${env.FEATURE}/release/*.apk", fingerprint: true
		}
	}
}
