pipeline {

	agent any

	tools {
		// Set names in Global Tools:
		gradle 'Gradle5.1'
	}

	environment {
		PERFECTO_TOKEN = credentials("PerfectoToken")
	}

	stages {
		stage('Compile and Build  Stage') {
			steps {
				sh './gradlew assembleDebug'
			}
		}

		stage('Adding variables to path') {
			steps {
				sh 'CLASSPATH=/Library/Java/Extensions/applicationcenterdeploytool.jar:/Library/Java/Extensions/json4j.jar'
			}
		}

		stage('upload to perfecto public cloud') {
			steps {
				sh 'curl -X GET "https://mobilecloud.perfectomobile.com/services/repositories/media/app-debug.apk?operation=delete&securityToken=$PERFECTO_TOKEN" -H "Content-Type: application/x-www-form-urlencoded" -H "cache-control: no-cache"'
				
				sh 'curl -X POST -T app/build/outputs/apk/debug/app-debug.apk "https://mobilecloud.perfectomobile.com/services/repositories/media/app-debug.apk?operation=upload&securityToken=$PERFECTO_TOKEN"'
			}
		}

		stage('uploading into IBM app store') {
			steps {
            	script {
					def returnValue = sh 'java -Dhttp.agent="Mozilla/5.0 (Windows NT 6.1)" -cp "applicationcenterdeploytool.jar:json4j.jar" com.ibm.appcenter.Upload -s https://dev.rfmp-mfp.com -c applicationcenter -u admin -p APPCTNR@dmin#Dev19 -e -f app/build/outputs/apk/debug/app-debug.apk'

/*
	                if(returnValue != 0) {        	
	    	            SlackUtils = load 'deploy/SlackUtils.groovy'
		                def SLACK_CHANNEL_DEV = "CFRDD6XLG"
		                def SLACK_CHANNEL_QA = "GFG4ELAJF"
		                def slackChannels = ""
		                slackChannels = SLACK_CHANNEL_DEV

	                    def slackMessage = "@here *!!! Android dev build - uploading to IBM App Center failed !!!*\n" +
	                        "*Fail time: ${SlackUtils.getFormattedTime()}*\n" +
	                        "${env.BUILD_URL}console"
	                    slackSend color: "#CC0000", channel: "${slackChannels}", message: slackMessage

	                    error("Build failed because app cannot upload to IBM App Center.")
                	}
 */
                }		
			}
		}

		stage('Testing Stage') {
			steps {
				sh 'ls'
			}
		}

		stage('Slack Notification Stage') {
			steps {
				script {

					SlackUtils = load 'deploy/SlackUtils.groovy'

					def shortCommitHash = env.GIT_COMMIT.substring(0, 6)

					def SLACK_CHANNEL_DEV = "CFRDD6XLG"
					def SLACK_CHANNEL_QA = "GFG4ELAJF"
					def SLACK_CHANNEL_UAT = ""
					def SLACK_CHANNEL_PROD = ""
					def slackChannels = ""

					def slackMessage

					def lastTenCommitMessages = sh(
						script: 'git log --oneline -n 5',
						returnStdout: true
					)
					lastTenCommitMessages = SlackUtils.addRMPLinks(lastTenCommitMessages)

					slackMessage = "*Android Dev Build Completed on Develop Push Commit: ${shortCommitHash}*\n"
					slackMessage += "*Build time: ${SlackUtils.getFormattedTime()}*\n"
					slackMessage += "${env.BUILD_URL}console\n"
					slackMessage += "https://bitbucket.org/rfmp-suncor/suncor-android\n"
					slackMessage += "Last 5 commit messages on Develop:\n ${lastTenCommitMessages}"

					slackChannels = SLACK_CHANNEL_DEV


					// https://github.com/jenkinsci/slack-plugin
					slackSend color: "good", channel: "${slackChannels}", message: slackMessage
				}
			}
		}
	}

	post {
		always {
			archiveArtifacts artifacts: '**/build/outputs/apk/debug/*.apk', fingerprint: true
//			junit 'build/reports/**/*.xml'
		}
	}
}
