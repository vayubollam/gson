pipeline {
	agent any

    triggers {
        pollSCM('* * * * *')
    }

	tools {
		// Set names in Global Tools:
		gradle 'Gradle5.1'
	}

	environment {
		PERFECTO_TOKEN = credentials("PerfectoToken")
		APPCTNR_URL = credentials("MobileSecret${env.BUILD_ENV}URL")
        APPCTNR_USERNAME = credentials("MobileSecret${env.BUILD_ENV}User")
        APPCTNR_PASSWORD = credentials("MobileSecret${env.BUILD_ENV}Password")
        STORE_PASSWORD = credentials("AndroidSecretStorePassword")
        KEY_PASSWORD = credentials("AndroidSecretKeyPassword")
	}

	stages {
		stage('update app settings json file to show build date') {
            steps {
                script {
                    SlackUtils = load 'deploy/SlackUtils.groovy'

                    def shortCommitHash = env.GIT_COMMIT.substring(0, 6)
                    sh (
                        script: "sed -i '' -e 's/__BUILD_DATE__/${SlackUtils.getFormattedTime()}/g' app/src/main/assets/buildSettings.properties",
                        returnStdout: false
                    )
                    sh (
                        script: "sed -i '' -e 's/__BUILD_SHA__/${shortCommitHash}/g' app/src/main/assets/buildSettings.properties",
                        returnStdout: false
                    )
                }

                sh 'cat app/src/main/assets/buildSettings.properties'
            }
        }

		stage('Compile and Build  Stage') {
			steps {
				script {
				    sh (
				        script: "./gradlew clean",
				        returnStdout: false
				    )
                    sh (
                        script: "./gradlew assemble${env.BUILD_ENV}Release",
                        returnStdout: false
                    )
				}
			}
		}

		stage('Adding variables to path') {
			steps {
				sh 'CLASSPATH=/Library/Java/Extensions/applicationcenterdeploytool.jar:/Library/Java/Extensions/json4j.jar'
			}
		}

		stage('upload to perfecto public cloud') {
			steps {
				script {
					if (env.BUILD_ENV == "QA") {
						sh (
							script: 'curl -X POST -T app/build/outputs/apk/QA/release/app-QA-release.apk "https://mobilecloud.perfectomobile.com/services/repositories/media/app-QA-release.apk?operation=upload&overwrite=true&securityToken=$PERFECTO_TOKEN"',
							returnStdout: false
						)
					}
				}
			}
		}

		stage('uploading into IBM app store') {
			steps {
            	script {
                    if (env.BUILD_ENV == "Dev"){
                        sh (
                            script: 'java -Dhttp.agent="Mozilla/5.0 (Windows NT 6.1)" -cp "applicationcenterdeploytool.jar:json4j.jar" com.ibm.appcenter.Upload -l "Petro-Canada (Android)" -s $APPCTNR_URL -c applicationcenter -u $APPCTNR_USERNAME -p $APPCTNR_PASSWORD -e -f app/build/outputs/apk/Dev/release/app-Dev-release.apk',
                            returnStdout: false
                        )
                    }
                    if (env.BUILD_ENV == "QA"){
                        sh (
                            script: 'java -Dhttp.agent="Mozilla/5.0 (Windows NT 6.1)" -cp "applicationcenterdeploytool.jar:json4j.jar" com.ibm.appcenter.Upload -l "Petro-Canada (Android)" -s $APPCTNR_URL -c applicationcenter -u $APPCTNR_USERNAME -p $APPCTNR_PASSWORD -e -f app/build/outputs/apk/QA/release/app-QA-release.apk',
                            returnStdout: false
                        )
                    }
                    if (env.BUILD_ENV == "Prod"){
                        sh (
                            script: 'java -Dhttp.agent="Mozilla/5.0 (Windows NT 6.1)" -cp "applicationcenterdeploytool.jar:json4j.jar" com.ibm.appcenter.Upload -l "Petro-Canada (Android)" -s $APPCTNR_URL -c applicationcenter -u $APPCTNR_USERNAME -p $APPCTNR_PASSWORD -e -f app/build/outputs/apk/Prod/release/app-Prod-release.apk',
                            returnStdout: false
                        )
                    }
				}		
			}
		}

		stage('Jenkins Logs Build Information') {
            steps {
                script {
                    SlackUtils = load 'deploy/SlackUtils.groovy'

                    def shortCommitHash = env.GIT_COMMIT.substring(0, 6)

                    echo "LOGS BLOCK"

                    echo "${env.Build_ENV} Build\n"
                    echo "Built Time: ${SlackUtils.getFormattedTime()}"
                    echo "Build SHA: ${shortCommitHash}"
                }
            }
        }

		stage('Slack Notification Stage') {
            steps {
                script {
                    SlackUtils = load 'deploy/SlackUtils.groovy'

                    def shortCommitHash = env.GIT_COMMIT.substring(0, 6)

                    def SLACK_CHANNEL_DEV = "CFRDD6XLG"
                    def SLACK_CHANNEL_QA = "GFG4ELAJF"
                    def SLACK_CHANNEL_UAT = ""
                    def SLACK_CHANNEL_PROD = "CG4FLFNP3"
                    def slackChannels = ""

                    def slackMessage = ""

                    if (env.BUILD_ENV == 'Dev'){
                        def lastTenCommitMessages = sh(
                            script: 'git log --oneline -n 5',
                            returnStdout: true
                        )
                        lastTenCommitMessages = SlackUtils.addRMPLinks(lastTenCommitMessages)

                        slackMessage = "*Android ${env.BUILD_ENV} Build Completed on Master Push Commit: ${shortCommitHash}*\n"
                        slackMessage += "*Build time: ${SlackUtils.getFormattedTime()}*\n"
                        slackMessage += "${env.BUILD_URL}console\n"
                        slackMessage += "https://bitbucket.org/rfmp-suncor/suncor-android-core/commits/${env.GIT_COMMIT}\n"
                        slackMessage += "Last 5 commit messages on Master:\n ${lastTenCommitMessages}"

                        slackChannels = SLACK_CHANNEL_DEV
                    }
                    if (env.BUILD_ENV == 'QA'){
                        def commitMessagesSinceLastTag = sh(
							script: 'git log --oneline $(git describe --tags --abbrev=0 @^)..@',
							returnStdout: true
						).trim()
						def androidTagName = sh(
							script: 'git describe --abbrev=0 --tags',
							returnStdout: true
						).trim()

						commitMessagesSinceLastTag = SlackUtils.addRMPLinks(commitMessagesSinceLastTag)

						slackMessage = "*Android ${env.BUILD_ENV} Build Completed on Tag Push: ${androidTagName} Commit: ${shortCommitHash}*\n"
						slackMessage += "*Build time: ${SlackUtils.getFormattedTime()}*\n"
						slackMessage += "${env.BUILD_URL}console\n"
						slackMessage += "https://bitbucket.org/rfmp-suncor/suncor-android-core/commits/tag/${androidTagName}\n"
						slackMessage += "Commit messages since last tag:\n ${commitMessagesSinceLastTag}"

						slackChannels = SLACK_CHANNEL_QA
                    }
                    if (env.BUILD_ENV == 'Prod') {
                        def commitMessagesSinceLastTag = sh(
                            script: 'git log --oneline $(git describe --tags --abbrev=0 @^)..@',
                            returnStdout: true
                        ).trim()
                        def androidTagName = sh(
                            script: 'git describe --abbrev=0 --tags',
                            returnStdout: true
                        ).trim()

                        commitMessagesSinceLastTag = SlackUtils.addRMPLinks(commitMessagesSinceLastTag)

                        slackMessage = "*Android ${env.BUILD_ENV} Build Completed for Git commit: ${env.GIT_SHA} [Tag: ${androidTagName}]*\n"
                        slackMessage += "*Build time: ${SlackUtils.getFormattedTime()}*\n"
                        slackMessage += "${env.BUILD_URL}console\n"
                        slackMessage += "https://bitbucket.org/rfmp-suncor/suncor-android-core/commits/${env.GIT_SHA}\n"
                        slackMessage += "Commit messages since last tag:\n ${commitMessagesSinceLastTag}"

                        slackChannels = SLACK_CHANNEL_PROD
                    }

                    slackSend color: "good", channel: "${slackChannels}", message: slackMessage
                }
            }
        }
	}

	post {
        failure {
            script {
                echo "FAILURE BLOCK OK"

                SlackUtils = load 'deploy/SlackUtils.groovy'

                def SLACK_CHANNEL_DEV = "CFRDD6XLG"
                def SLACK_CHANNEL_QA = "GFG4ELAJF"
                def SLACK_CHANNEL_PROD = "CG4FLFNP3"
                def slackChannels = ""
                def slackMessage = ""

                if (env.BUILD_ENV == "Dev"){
                    def shortCommitHash = env.GIT_COMMIT.substring(0, 6)

                    slackChannels = SLACK_CHANNEL_DEV

                    slackMessage = "*!!! Android ${env.BUILD_ENV} BUILD FAILED !!!*\n" +
                    "*Failed on commit: ${shortCommitHash}*\n" +
                    "https://bitbucket.org/rfmp-suncor/suncor-android-core/commits/${env.GIT_COMMIT}\n" +
                    "*Fail time: ${SlackUtils.getFormattedTime()}*\n" +
                    "${env.BUILD_URL}console"
                }

                if (env.BUILD_ENV == "QA"){
                    def androidTagName = sh(
                        script: 'git describe --abbrev=0 --tags',
                        returnStdout: true
					).trim()

                    slackChannels = SLACK_CHANNEL_QA

                    slackMessage = "*!!! Android ${env.BUILD_ENV} BUILD FAILED !!!*\n" +
                    "*Failed on Tag: ${androidTagName}*\n" +
                    "https://bitbucket.org/rfmp-suncor/suncor-android-core/commits/tag/${androidTagName}\n" +
                    "*Fail time: ${SlackUtils.getFormattedTime()}*\n" +
                    "${env.BUILD_URL}console"
                }

                if (env.BUILD_ENV == "Prod") {
                    def androidTagName = sh(
                        script: 'git describe --abbrev=0 --tags',
                        returnStdout: true
                    ).trim()

                    slackChannels = SLACK_CHANNEL_PROD

                    slackMessage = "*!!! Android ${env.BUILD_ENV} BUILD FAILED !!!*\n" +
                    "*Failed on Commit: ${env.GIT_SHA}*\n" +
                    "https://bitbucket.org/rfmp-suncor/suncor-android-core/commits/${env.GIT_SHA}\n" +
                    "*Fail time: ${SlackUtils.getFormattedTime()}*\n" +
                    "${env.BUILD_URL}console"
                }
                slackSend color: "#CC0000", channel: "${slackChannels}", message: slackMessage
            }
        }

		always {
			archiveArtifacts artifacts: "**/build/outputs/apk/${BUILD_ENV}/release/*.apk", fingerprint: true
		}
	}
}
