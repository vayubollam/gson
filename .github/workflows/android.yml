name: Android CI

on:
  push:
    tags:
      - "*"
  permissions:
    contents: read
    issues: read
    checks: write
    pull-requests: write

jobs:

  test-results:
    name: Test Results (Sample RUN)
    if: github.event.workflow_run.conclusion != 'skipped'
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      # required by download step to access artifacts API
      actions: read

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle

        # Actions sets GITHUB_REF tag in form refs/tags/QUTCarwash-3.3.0-RC-3.0.0
      # split on '/' and then '-' with awk to get the QUTCarwash part out for SchemeFeature
    - name: Get build Env and Feature from tag
      run: |
          ENV=$(echo ${GITHUB_REF} | awk -F/ '{print $3}' | awk -F- '{print $1}')
          echo BUILD_ENV=$ENV >> $GITHUB_ENV

    - name: Set KEY_PASSWORD and STORE_PASSWORD
      run: |
          echo KEY_PASSWORD=${{ secrets.ANDROIDSECRETKEYPASSWORD }} >> $GITHUB_ENV
          echo STORE_PASSWORD=${{ secrets.ANDROIDSECRETSTOREPASSWORD }}  >> $GITHUB_ENV

    - name: Get FULL_DATE
      run: |
          echo FULL_DATE=$(TZ="Canada/Eastern" date) >> $GITHUB_ENV
    - name: Get SHORT_DATE
      run: |
          echo SHORT_DATE=$(TZ="Canada/Eastern" date +%Y%m%d%H) >> $GITHUB_ENV

    # this gets the first 6 characters of the git hash, used for labelling
    - name: Get short hash
      run: |
          short=${GITHUB_SHA::6}
          echo SHORT_HASH=$short >> $GITHUB_ENV

    - name: Echo env for logs
      run: |
          echo BUILD_ENV=$BUILD_ENV
          echo SHORT_HASH=$SHORT_HASH

    - name: Update app buildSettings.properties to show build date
      run: |
          sed -i -e 's/__BUILD_DATE__/${{ env.FULL_DATE }}/g' "app/src/main/assets/buildSettings.properties"
          sed -i -e 's/__BUILD_SHA__/${{ env.SHORT_HASH }}/g' "app/src/main/assets/buildSettings.properties"

    - name: Cache SonarQube packages
      uses: actions/cache@v2
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle

    #- name: Build and analyze
    #  env:
    #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #    SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #  run: ./gradlew clean && ./gradlew build sonarqube --info

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Clean Gradle
      run: ./gradlew clean
    - name: Compile and Build
      run: ./gradlew assemble${{ env.BUILD_ENV }}Release

    - name: Download and Extract Artifacts
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      run: |
        mkdir -p artifacts && cd artifacts
        artifacts_url=${{ github.event.workflow_run.artifacts_url }}
        gh api "$artifacts_url" -q '.artifacts[] | [.name, .archive_download_url] | @tsv' | while read artifact
        do
          IFS=$'\t' read name url <<< "$artifact"
          gh api $url > "$name.zip"
          unzip -d "$name" "$name.zip"
        done

    - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@master-2.x
        with:
          commit: ${{ github.event.workflow_run.head_sha }}
          check_name: Test Results (reference)
          event_file: artifacts/Event File/event.json
          event_name: ${{ github.event.workflow_run.event }}
          check_run_annotations_branch: "master, devel-1.0, devel-2.0"
          files: "artifacts/**/*.xml"
          log_level: DEBUG
    - name: Set badge color
      shell: bash
      run: |
        case ${{ fromJSON( steps.test-results.outputs.json ).conclusion }} in
          success)
            echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
            ;;
          failure)
            echo "BADGE_COLOR=800000" >> $GITHUB_ENV
            ;;
          neutral)
            echo "BADGE_COLOR=696969" >> $GITHUB_ENV
            ;;
        esac

    - name: Create badge
        uses: emibcn/badge-action@d6f51ff11b5c3382b3b88689ae2d6db22d9737d1
        with:
          label: Tests
          status: '${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.runs }} runs: ${{ fromJSON( steps.test-results.outputs.json ).conclusion }}'
          color: ${{ env.BADGE_COLOR }}
          path: badge.svg

    - name: Upload badge to Gist
        # Upload only for master branch
        if: >
          github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'master' ||
          github.event_name != 'workflow_run' && github.ref == 'refs/heads/master'
        uses: andymckay/append-gist-action@1fbfbbce708a39bd45846f0955ed5521f2099c6d
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gistURL: https://gist.githubusercontent.com/EnricoMi/612cb538c14731f1a8fefe504f519395
          file: badge.svg

    - name: Upload Artifact
      uses: actions/upload-artifact@v2.2.0
      with:
       name: Release artifact
       path: app/build/outputs/apk/${{ env.BUILD_ENV }}/release/*.apk
       
    - name: Upload to Perfecto public cloud
      if: ${{ env.BUILD_ENV == 'QACarwash' || env.BUILD_ENV == 'QAScrum' || env.BUILD_ENV == 'DevScrum' || env.BUILD_ENV == 'DevCarwash' || env.BUILD_ENV == 'Prod' || env.BUILD_ENV == 'UATTestflight' || env.BUILD_ENV == 'DevSus' || env.BUILD_ENV == 'QASus' || env.BUILD_ENV == 'Dev' || env.BUILD_ENV == 'UAT' }}
      env:
        PERFECTO_TOKEN: ${{ secrets.PERFECTO_TOKEN }}
      run: |
        curl -X POST -T app/build/outputs/apk/${{ env.BUILD_ENV }}/release/*.apk "https://ibmgbs.perfectomobile.com/services/repositories/media/app-${{ env.BUILD_ENV }}${{ env.FEATURE }}-release.apk?operation=upload&securityToken=$PERFECTO_TOKEN&overwrite=true" -H 'Content-Type: application/x-www-form-urlencoded' -H 'cache-control: no-cache' --http1.1

    - name: Get appropriate credentials for AppCenter
      run: |
        case ${{ env.BUILD_ENV }} in
          QACarwash)
            echo APPCNTR_URL=https://qa.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_QA_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_QA_PASSWORD >> $GITHUB_ENV
            echo TEAMS_WEBHOOK_URL=https://suncor.webhook.office.com/webhookb2/9f66d075-001e-4288-8913-b34a1044b1d2@1aa51068-11a6-4bd2-8646-1fff31a30ffc/IncomingWebhook/e62caca0e4d443789a0e5bf1ab827386/6438f740-0192-4e30-b672-cdbd594c63cf >> $GITHUB_ENV
            ;;
          DevCarwash)
            echo APPCNTR_URL=https://dev.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_DEV_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_DEV_PASSWORD >> $GITHUB_ENV
            echo TEAMS_WEBHOOK_URL=https://suncor.webhook.office.com/webhookb2/9f66d075-001e-4288-8913-b34a1044b1d2@1aa51068-11a6-4bd2-8646-1fff31a30ffc/IncomingWebhook/a997fdcf36434291ad2e55168666d916/6438f740-0192-4e30-b672-cdbd594c63cf >> $GITHUB_ENV
            ;;
          UAT)
            echo APPCNTR_URL=https://uatqa.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_UAT_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_UAT_PASSWORD >> $GITHUB_ENV
            echo TEAMS_WEBHOOK_URL=https://suncor.webhook.office.com/webhookb2/9f66d075-001e-4288-8913-b34a1044b1d2@1aa51068-11a6-4bd2-8646-1fff31a30ffc/IncomingWebhook/2886be1b605d47d7bbe6709e312825b0/6438f740-0192-4e30-b672-cdbd594c63cf >> $GITHUB_ENV
            ;;
          Dev)
            echo APPCNTR_URL=https://dev.rfmp-mfp.com  >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_DEVSCRUM_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_DEVSCRUM_PASSWORD >> $GITHUB_ENV
            echo TEAMS_WEBHOOK_URL=https://suncor.webhook.office.com/webhookb2/9f66d075-001e-4288-8913-b34a1044b1d2@1aa51068-11a6-4bd2-8646-1fff31a30ffc/IncomingWebhook/a997fdcf36434291ad2e55168666d916/6438f740-0192-4e30-b672-cdbd594c63cf >> $GITHUB_ENV
            ;;
          DevScrum)
            echo APPCNTR_URL=https://scrumdev.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_DEVSCRUM_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_DEVSCRUM_PASSWORD >> $GITHUB_ENV
            echo TEAMS_WEBHOOK_URL=https://suncor.webhook.office.com/webhookb2/9f66d075-001e-4288-8913-b34a1044b1d2@1aa51068-11a6-4bd2-8646-1fff31a30ffc/IncomingWebhook/f706e2a8d74a454fa3274fd261c4dca7/6438f740-0192-4e30-b672-cdbd594c63cf >> $GITHUB_ENV
            ;;
          QAScrum)
            echo APPCNTR_URL=https://scrumqa.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_QASCRUM_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_QASCRUM_PASSWORD >> $GITHUB_ENV
            echo TEAMS_WEBHOOK_URL=https://suncor.webhook.office.com/webhookb2/9f66d075-001e-4288-8913-b34a1044b1d2@1aa51068-11a6-4bd2-8646-1fff31a30ffc/IncomingWebhook/2b0b614c42774492959a70e890466267/6438f740-0192-4e30-b672-cdbd594c63cf >> $GITHUB_ENV
            ;;
          Prod)
            echo APPCNTR_URL=https://mfp.petro-canada.ca >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_PROD_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_PROD_PASSWORD >> $GITHUB_ENV
            echo TEAMS_WEBHOOK_URL=https://suncor.webhook.office.com/webhookb2/9f66d075-001e-4288-8913-b34a1044b1d2@1aa51068-11a6-4bd2-8646-1fff31a30ffc/IncomingWebhook/5f43bb283062434eb63fb6245495b687/6438f740-0192-4e30-b672-cdbd594c63cf >> $GITHUB_ENV
            ;;
          UATTestflight)
            echo APPCNTR_URL=https://uatqa.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_UAT_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_UAT_PASSWORD >> $GITHUB_ENV
            echo TEAMS_WEBHOOK_URL=https://suncor.webhook.office.com/webhookb2/9f66d075-001e-4288-8913-b34a1044b1d2@1aa51068-11a6-4bd2-8646-1fff31a30ffc/IncomingWebhook/2886be1b605d47d7bbe6709e312825b0/6438f740-0192-4e30-b672-cdbd594c63cf >> $GITHUB_ENV
            ;;
          DevSus)
            echo APPCNTR_URL=https://opsdev.rfmp-mfp.com/ >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_DEVSUS_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_DEVSUS_PASSWORD >> $GITHUB_ENV
            echo TEAMS_WEBHOOK_URL=https://suncor.webhook.office.com/webhookb2/9f66d075-001e-4288-8913-b34a1044b1d2@1aa51068-11a6-4bd2-8646-1fff31a30ffc/IncomingWebhook/480b7560045846db9f9814b9347ce38c/6438f740-0192-4e30-b672-cdbd594c63cf >> $GITHUB_ENV
            ;;
          QASus)
            echo APPCNTR_URL=https://opsqa.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_QASUS_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_QASUS_PASSWORD >> $GITHUB_ENV
            echo TEAMS_WEBHOOK_URL=https://suncor.webhook.office.com/webhookb2/9f66d075-001e-4288-8913-b34a1044b1d2@1aa51068-11a6-4bd2-8646-1fff31a30ffc/IncomingWebhook/4db61fdb48e8409b897ba6c220636322/6438f740-0192-4e30-b672-cdbd594c63cf >> $GITHUB_ENV
            ;;
        esac
   # this jar does not return a non-zero code on failure, so the workflow does not fail even if this upload fails
    - name: Upload to IBM app store
      env:
        APPCNTR_URL: ${{ env.APPCNTR_URL }}
      run: |
        APPCNTR_USERNAME="${{ secrets[env.APPCNTR_USERNAME]}}"
        APPCNTR_PASSWORD="${{ secrets[env.APPCNTR_PASSWORD]}}"
        java -Dhttp.agent='Mozilla/5.0 (Windows NT 6.1)' -cp 'applicationcenterdeploytool.jar:json4j.jar' com.ibm.appcenter.Upload -l 'Petro-Canada ${{env.BUILD_SCHEME}}' -s "$APPCNTR_URL" -c applicationcenter -u "$APPCNTR_USERNAME" -p "$APPCNTR_PASSWORD" -e -isActive true -isInstaller true -f app/build/outputs/apk/${{ env.BUILD_ENV }}/release/*.apk
         
  
    - name: Setup JFrog
      uses: jfrog/setup-jfrog-cli@v1
      env:
          JF_ARTIFACTORY_RFMP_ANDROID: ${{ secrets.JF_ARTIFACTORY_RFMP }}

    - name: Upload APK to JFrog
      run: |
          jfrog rt u app/build/outputs/apk/${{ env.BUILD_ENV }}/release/*.apk rfmp-android/${{ env.BUILD_ENV }}/release/app-${{ env.BUILD_ENV }}-release.apk

    - name: Upload mapping file to JFrog
      run: |
          jfrog rt u app/build/outputs/apk/${{ env.BUILD_ENV }}/release/mapping.txt rfmp-android/${{ env.BUILD_ENV }}/release/mapping-${{ env.BUILD_ENV }}-release.txt

    - name: Send MS Teams build notification
      run: |
        curl -H 'Content-Type: application/json' -d "{ \"type\":\"message\", \"attachments\":[ { \"contentType\":\"application\/vnd.microsoft.card.adaptive\", \"contentUrl\":null, \"content\": { \"type\": \"AdaptiveCard\", \"summary\":\"Build\", \"msTeams\": { \"width\": \"full\" }, \"body\": [ { \"type\": \"TextBlock\", \"size\": \"Large\", \"weight\": \"Bolder\", \"text\": \"Github Actions build deployed on $BUILD_ENV\", \"wrap\": true, \"style\": \"heading\", \"color\": \"Default\" }, { \"type\": \"FactSet\", \"facts\": [ { \"title\": \"Build Number\", \"value\": \"$SHORT_DATE\" }, { \"title\": \"Tag\", \"value\": \"$GITHUB_REF_NAME\" }, { \"title\": \"Platform\", \"value\": \"Android\" }, { \"title\": \"Build time\", \"value\": \"$FULL_DATE\" }, { \"title\": \"SHA\", \"value\": \"$SHORT_HASH\" }, { \"title\": \"Started by\", \"value\": \"$GITHUB_ACTOR\" } ], \"separator\": true, \"spacing\": \"Medium\" } ], \"actions\": [ { \"type\": \"Action.OpenUrl\", \"title\": \"View in AppCenter\", \"url\": \"${APPCNTR_URL}/appcenterconsole/console.html\" } ], \"$schema\": \"http:\/\/adaptivecards.io\/schemas\/adaptive-card.json\", \"version\": \"1.3\" } } ] }" ${TEAMS_WEBHOOK_URL}
   
    
    
