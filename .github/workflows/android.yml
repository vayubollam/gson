name: Android CI

on:
  push:
    tags:
      - "*"
  pull_request:
    types: [opened, synchronize, reopened]
jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle
        
        # Actions sets GITHUB_REF tag in form refs/tags/QUTCarwash-3.3.0-RC-3.0.0
      # split on '/' and then '-' with awk to get the QUTCarwash part out for SchemeFeature
    - name: Get build Env and Feature from tag
      run: |
          ENV=$(echo ${GITHUB_REF} | awk -F/ '{print $3}' | awk -F- '{print $1}')
          echo BUILD_ENV=$ENV >> $GITHUB_ENV
          
    - name: Set KEY_PASSWORD and STORE_PASSWORD  
      run: |
          echo KEY_PASSWORD=${{ secrets.ANDROIDSECRETKEYPASSWORD }} >> $GITHUB_ENV
          echo STORE_PASSWORD=${{ secrets.ANDROIDSECRETSTOREPASSWORD }}  >> $GITHUB_ENV
      
    - name: Get FULL_DATE
      run: |
          echo FULL_DATE=$(TZ="Canada/Eastern" date) >> $GITHUB_ENV
    - name: Get SHORT_DATE
      run: |
          echo SHORT_DATE=$(TZ="Canada/Eastern" date +%Y%m%d%H) >> $GITHUB_ENV
          
    # this gets the first 6 characters of the git hash, used for labelling
    - name: Get short hash
      run: |
          short=${GITHUB_SHA::6}
          echo SHORT_HASH=$short >> $GITHUB_ENV
          
    - name: Echo env for logs
      run: |
          echo BUILD_ENV=$BUILD_ENV
          echo SHORT_HASH=$SHORT_HASH
   
    - name: Update app buildSettings.properties to show build date
      run: |
          sed -i -e 's/__BUILD_DATE__/${{ env.FULL_DATE }}/g' "app/src/main/assets/buildSettings.properties"
          sed -i -e 's/__BUILD_SHA__/${{ env.SHORT_HASH }}/g' "app/src/main/assets/buildSettings.properties"

    - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Clean Gradle
      run: ./gradlew clean
    - name: Compile and Build
      run: ./gradlew assemble${{ env.BUILD_ENV }}Release
   
    - name: Upload APK
      uses: actions/upload-artifact@v2.2.0
      with:
       name: Release artifact
       path: app/build/outputs/apk/${{ env.BUILD_ENV }}/release/*.apk
       
    - name: Upload to Perfecto public cloud
      if: ${{ env.BUILD_SCHEME == 'QA' || env.BUILD_SCHEME == 'QASus' || env.BUILD_SCHEME == 'Dev' || env.BUILD_SCHEME == 'UAT' }}
      env:
        PERFECTO_TOKEN: ${{ secrets.PERFECTO_TOKEN }}
      run: |
        curl -v --fail-with-body --data-binary app/build/outputs/apk/${{ env.BUILD_ENV }}/release/*.apk "https://ibmgbs.perfectomobile.com/services/repositories/media/app-${env.BUILD_ENV}${env.FEATURE}-release.apk?operation=upload&securityToken=$PERFECTO_TOKEN&overwrite=true" -H 'Content-Type: application/x-www-form-urlencoded' -H 'cache-control: no-cache' --http1.1   

    - name: Get appropriate app center credentials
      run: |
        case ${{ env.BUILD_ENV }} in
          QACarwash)
            echo APPCNTR_URL=https://qa.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_QA_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_QA_PASSWORD >> $GITHUB_ENV
            ;;
          DevCarwash)
            echo APPCNTR_URL=https://dev.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_DEV_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_DEV_PASSWORD >> $GITHUB_ENV
            ;;
          UAT)
            echo APPCNTR_URL=https://uatqa.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_UAT_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_UAT_PASSWORD >> $GITHUB_ENV
            ;;
          Dev)
            echo APPCNTR_URL=https://dev.rfmp-mfp.com  >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_DEVSCRUM_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_DEVSCRUM_PASSWORD >> $GITHUB_ENV
            ;;
          QAScrum)
            echo APPCNTR_URL=https://scrumqa.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_QASCRUM_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_QASCRUM_PASSWORD >> $GITHUB_ENV
            ;;
          Prod)
            echo APPCNTR_URL=https://mfp.petro-canada.ca >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_PROD_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_PROD_PASSWORD >> $GITHUB_ENV
            ;;
          UATTestflight)
            echo APPCNTR_URL=https://uatqa.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_UAT_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_UAT_PASSWORD >> $GITHUB_ENV
            ;;
          DevSus)
            echo APPCNTR_URL=https://opsdev.rfmp-mfp.com/ >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_DEVSUS_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_DEVSUS_PASSWORD >> $GITHUB_ENV
            ;;
          QASus)
            echo APPCNTR_URL=https://opsqa.rfmp-mfp.com >> $GITHUB_ENV
            echo APPCNTR_USERNAME=APPCENTRE_QASUS_USERNAME >> $GITHUB_ENV
            echo APPCNTR_PASSWORD=APPCENTRE_QASUS_PASSWORD >> $GITHUB_ENV
            ;;
        esac
   # this jar does not return a non-zero code on failure, so the workflow does not fail even if this upload fails
    - name: Upload to QA IBM app store
      env:
        APPCNTR_URL: ${{ env.APPCNTR_URL }}
      run: |
        APPCNTR_USERNAME="${{ secrets[env.APPCNTR_USERNAME]}}"
        APPCNTR_PASSWORD="${{ secrets[env.APPCNTR_PASSWORD]}}"
        java -Dhttp.agent='Mozilla/5.0 (Windows NT 6.1)' -cp 'applicationcenterdeploytool.jar:json4j.jar' com.ibm.appcenter.Upload -l 'Petro-Canada ${{env.BUILD_SCHEME}}' -s "$APPCNTR_URL" -c applicationcenter -u "$APPCNTR_USERNAME" -p "$APPCNTR_PASSWORD" -e -isActive true -isInstaller true -f app/build/outputs/apk/${{ env.BUILD_ENV }}/release/*.apk
         
  # - name: Setup JFrog
  #   uses: jfrog/setup-jfrog-cli@v1
  #   env:
  #      JF_ARTIFACTORY_RFMP_IOS: ${{ secrets.JF_ARTIFACTORY_RFMP }}

    - name: test notify teams
      env:
        TEAMS_WEBHOOK_URL: https://suncor.webhook.office.com/webhookb2/9f66d075-001e-4288-8913-b34a1044b1d2@1aa51068-11a6-4bd2-8646-1fff31a30ffc/IncomingWebhook/a498ba31c5e74dd98b927a932b1c2f0c/5b56d944-e978-4862-a720-a1f9589d6c37
      run: |
        curl -H 'Content-Type: application/json' -d "{\"text\": \"Workflow run complete on ${GITHUB_REF}: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" ${TEAMS_WEBHOOK_URL}
  

      
   
    
    
