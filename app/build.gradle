apply plugin: 'com.android.application'
apply plugin: "androidx.navigation.safeargs"
if (getGradle().getStartParameter().getTaskRequests().toString().contains("QA")) {
    apply plugin: 'io.fabric'
}

repositories {
    jcenter()
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.suncor.android.SuncorApplication"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 3
        versionName "3.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "MAP_API_KEY", MAP_API_KEY
        resValue "string", "MAP_API_KEY", MAP_API_KEY
    }

    dataBinding {
        enabled = true
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        pickFirst 'META-INF/ASL2.0'
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/NOTICE'
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    flavorDimensions "version"
    productFlavors {
        Dev {
            dimension "version"
            applicationId "com.suncor.android.SuncorApplicationDev"
            buildConfigField("String", "SUNCOR_WEBSITE", "\"https://petrocanada-scqut.network.qut/\"")
        }
        QA {
            dimension "version"
            applicationId "com.suncor.android.SuncorApplicationQA"
            buildConfigField("String", "SUNCOR_WEBSITE", "\"https://petrocanada-scqut.network.qut/\"")
        }
        Prod {
            dimension "version"
            buildConfigField("String", "SUNCOR_WEBSITE", "\"https://www.petro-canada.ca/\"")
        }
    }
}
configurations {
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":uicomponents")

    implementation "androidx.appcompat:appcompat:$rootProject.appcompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    implementation "androidx.legacy:legacy-support-v4:$rootProject.legacyLibraryVersion"
    implementation "com.google.android.material:material:$rootProject.materialLibraryVersion"
    implementation "androidx.navigation:navigation-ui:$rootProject.navigationVersion"
    implementation "androidx.navigation:navigation-fragment:$rootProject.navigationVersion"

    //Library for json Parsing
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"

    //jetpack library for viewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.archLifecycleVersion"

    //google map libraries
    implementation "com.google.android.gms:play-services-maps:$rootProject.playServicesVersion"
    implementation "com.google.android.gms:play-services-location:$rootProject.playServicesVersion"
    implementation "com.google.android.libraries.places:places:$rootProject.googlePlacesVersion"
    implementation 'com.google.maps.android:android-maps-utils:0.5'

    implementation "com.ibm.mobile.foundation:ibmmobilefirstplatformfoundation:$rootProject.mfpVersion"

    //Dagger2
    implementation "com.google.dagger:dagger-android:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"

    //library for workers
    implementation "android.arch.work:work-runtime:$rootProject.workManagerVersion"

    implementation 'com.google.zxing:core:3.3.3'

    implementation "com.google.firebase:firebase-core:$rootProject.firebaseVersion"
    implementation "com.crashlytics.sdk.android:crashlytics:$rootProject.crashlyticsVersion"
    compile 'com.google.android.gms:play-services-tagmanager:11.0.4'

    testImplementation "androidx.arch.core:core-testing:$rootProject.archLifecycleVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
}
if (getGradle().getStartParameter().getTaskRequests().toString().contains("QA")) {
    apply plugin: 'com.google.gms.google-services'
}